This file serves as a testing overview for the North * project. 
It will only go over non-ajax functionality as that is all we
can test in these functional tests.


Let's do some setup and log in...

    >>> from plone.testing.z2 import Browser
    >>> app = layer['app']
    >>> browser = Browser(app)
    >>> browser.handleErrors = False
    >>> portal = layer['portal']
    >>> import transaction	
    
    >>> portal_url = portal.absolute_url()    
    
    >>> from plone.app.testing import SITE_OWNER_NAME, SITE_OWNER_PASSWORD
    >>> browser.open(portal.absolute_url() + '/login_form')
    >>> browser.getControl(name='__ac_name').value = SITE_OWNER_NAME
    >>> browser.getControl(name='__ac_password').value = SITE_OWNER_PASSWORD
    >>> browser.getControl(name='submit').click()

Open up the workflow manager

    >>> browser.open(portal.absolute_url() + '/@@workflowmanager')
    
There should not be any plone workflows by default listed.

    >>> 'folder_workflow' in browser.contents
    False
    
    >>> 'plone_workflow' in browser.contents
    False
    
    >>> 'intranet_workflow' in browser.contents
    False
    
    >>> 'intranet_folder_workflow' in browser.contents
    False
    
    >>> 'one_state_workflow' in browser.contents
    False
    
    >>> 'simple_publication_workflow' in browser.contents
    False
        
    
Let's start by creating a new workflow. We'll clone it from the
Simple publication workflow and call it "My Simple Publication Workflow".

    >>> browser.getControl("Create new workflow").click()
    >>> browser.getControl(name='clone-from-workflow').value = ['simple_publication_workflow']
    >>> browser.getControl(name='workflow-name').value = "My Simple Publication Workflow"
    >>> browser.getControl(name='form.actions.add').click()
    
    
It should have been created
    
    >>> "My Simple Publication Workflow" in browser.contents
    True
    

The id should have also been created

    >>> "my-simple-publication-workflow" in browser.contents
    True
    
Test modifying a permission role

    >>> browser.getControl(name="permission-Edit-role-Reviewer-state-private").value
    []
    >>> browser.getControl(name="permission-Edit-role-Reviewer-state-private").value = True
    
    >>> browser.getControl(name="save-state-private-button").click()
    
Now see if it worked

    >>> browser.getControl(name="permission-Edit-role-Reviewer-state-private").value
    True
    
Now uncheck that same one

    >>> browser.getControl(name="permission-Edit-role-Reviewer-state-private").value = False
    >>> browser.getControl(name="save-state-private-button").click()
    >>> browser.getControl(name="permission-Edit-role-Reviewer-state-private").value
    []
    
Let's try some group role stuff now.
First, let's check one.

    >>> browser.getControl(name="group-Administrators-role-Reviewer-state-private").value
    []
    >>> browser.getControl(name="group-Administrators-role-Reviewer-state-private").value = True
    >>> browser.getControl(name="save-state-private-button").click()
    >>> browser.getControl(name="group-Administrators-role-Reviewer-state-private").value
    True
    
And uncheck it now

    >>> browser.getControl(name="group-Administrators-role-Reviewer-state-private").value = False
    >>> browser.getControl(name="save-state-private-button").click()
    >>> browser.getControl(name="group-Administrators-role-Reviewer-state-private").value
    []
    
Let's say we don't want the member to be able to submit content for publication here.

    >>> browser.getControl(name="transition-submit-state-private").value
    True
    >>> browser.getControl(name="transition-submit-state-private").value = False
    >>> browser.getControl(name="save-state-private-button").click()
    >>> browser.getControl(name="transition-submit-state-private").value
    []
    
Let's practice re-adding again

    >>> browser.getControl(name="transition-submit-state-private").value
    []
    >>> browser.getControl(name="transition-submit-state-private").value = True
    >>> browser.getControl(name="save-state-private-button").click()
    >>> browser.getControl(name="transition-submit-state-private").value
    True
    
Suppose we'd like the initial state to be published now...

    >>> browser.getControl(name='state-published-initial-state').value
    []
    >>> browser.getControl(name='state-private-initial-state').value
    True
    >>> browser.getControl(name='state-published-initial-state').value = True
    >>> browser.getControl(name='save-state-published-button').click()
    
    >>> browser.getControl(name='state-published-initial-state').value
    True
    >>> browser.getControl(name='state-private-initial-state').value
    []
    
Let's edit the title and description now.

    >>> browser.getControl(name='state-private-title').value = "My New Title"
    >>> browser.getControl(name='state-private-description').value = "My New Description"
    >>> browser.getControl(name="save-state-private-button").click()
    
    >>> browser.getControl(name='state-private-title').value
    'My New Title'
    >>> browser.getControl(name='state-private-description').value
    'My New Description'
    

We'll move onto editing Transitions now
Let's edit the guards first

    >>> browser.getControl(name='transition-retract-guard-permission-rpc').value
    False
    >>> browser.getControl(name='transition-retract-guard-permission-rpc').value = True
    >>> browser.getControl(name='transition-retract-guard-roles').value
    []
    >>> browser.getControl(name='transition-retract-guard-roles').value = ['Member']
    >>> browser.getControl(name='transition-retract-guard-groups').value
    []
    >>> browser.getControl(name='transition-retract-guard-groups').value = ['Reviewers']
    >>> browser.getControl(name='save-transition-retract-button').click()
    
    >>> browser.getControl(name='transition-retract-guard-permission-rpc').value
    True
    >>> browser.getControl(name='transition-retract-guard-roles').value
    ['Member']
    >>> browser.getControl(name='transition-retract-guard-groups').value
    ['Reviewers']


Now, we'll modify some properties

    >>> browser.getControl(name='transition-retract-new-state').value
    ['private']
    >>> browser.getControl(name='transition-retract-new-state').value = ['published']
    >>> browser.getControl(name='transition-retract-autotrigger').value
    []
    >>> browser.getControl(name='transition-retract-autotrigger').value = True
    >>> browser.getControl(name='transition-retract-display-name').value = 'My New Name'
    >>> browser.getControl(name='save-transition-retract-button').click()
    
    >>> browser.getControl(name='transition-retract-new-state').value
    ['published']
    >>> browser.getControl(name='transition-retract-autotrigger').value
    ['0']
    >>> browser.getControl(name='transition-retract-display-name').value
    'My New Name'
    
    
We'll even add a state that uses this transition from here.

    >>> browser.getControl(name='transition-retract-state-private-selected').value
    []
    >>> browser.getControl(name='transition-retract-state-private-selected').value = True
    >>> browser.getControl(name='save-transition-retract-button').click()
    
Should add it in two places, the state and the transition

    >>> browser.getControl(name='transition-retract-state-private-selected').value
    True
    >>> browser.getControl(name='transition-retract-state-private').value
    True

    
Let's test adding a new state and test error handling.

    >>> browser.getControl(name='add-new-state-button').click()
    >>> browser.getControl(name='clone-from-state').value = ['private']
    >>> browser.getControl(name='form.actions.add').click()
    
Should show error
    
    >>> "Invalid workflow name. Please try another." in browser.contents
    True
    >>> browser.getControl(name='clone-from-state').value
    ['private']
    
    >>> browser.getControl(name='state-name').value = "My New State"
    >>> browser.getControl(name='form.actions.add').click()
    
Should now be added

    >>> "My New State" in browser.contents
    True

Now the same thing for a transition

    >>> browser.getControl(name='add-new-transition-button').click()
    >>> browser.getControl(name='clone-from-transition').value = ['retract']
    >>> browser.getControl(name='form.actions.add').click()

Should show error

    >>> "Invalid workflow name. Please try another." in browser.contents
    True
    >>> browser.getControl(name='clone-from-transition').value
    ['retract']

    >>> browser.getControl(name='transition-name').value = "My New Transition"
    >>> browser.getControl(name='form.actions.add').click()

Should now be added

    >>> "My New Transition" in browser.contents
    True
    
    
Let's now delete the workflow we've been playing with.

    >>> browser.getControl(name='delete-workflow-button').click()
    >>> browser.getControl(name='form.actions.delete').click()
    
    >>> "My Simple Publication Workflow" in browser.contents
    False

